diff -uraN obs-studio-31.1.0/frontend/utility/OBSCanvas.cpp omv-obs-studio-31.1.0/frontend/utility/OBSCanvas.cpp
--- obs-studio-31.1.0/frontend/utility/OBSCanvas.cpp	2025-07-07 20:35:42.000000000 +0200
+++ omv-obs-studio-31.1.0/frontend/utility/OBSCanvas.cpp	2025-07-08 20:49:59.857805146 +0200
@@ -55,15 +55,15 @@
 	return std::nullopt;
 }
 
-std::optional<Canvas> Canvas::Load(obs_data_t *data)
+std::unique_ptr<Canvas> Canvas::Load(obs_data_t *data)
 {
 	if (OBSDataAutoRelease canvas_data = obs_data_get_obj(data, "info")) {
 		if (obs_canvas_t *canvas = obs_load_canvas(canvas_data)) {
-			return canvas;
+			return std::make_unique<Canvas>(canvas);
 		}
 	}
 
-	return std::nullopt;
+	return nullptr;
 }
 
 std::vector<Canvas> Canvas::LoadCanvases(obs_data_array_t *canvases)
diff -uraN obs-studio-31.1.0/frontend/utility/OBSCanvas.hpp omv-obs-studio-31.1.0/frontend/utility/OBSCanvas.hpp
--- obs-studio-31.1.0/frontend/utility/OBSCanvas.hpp	2025-07-07 20:35:42.000000000 +0200
+++ omv-obs-studio-31.1.0/frontend/utility/OBSCanvas.hpp	2025-07-08 20:47:28.362540663 +0200
@@ -17,7 +17,7 @@
 
 #pragma once
 
-#include <optional>
+#include <memory>
 #include <vector>
 
 #include "obs.h"
@@ -41,7 +41,7 @@
 	operator obs_canvas_t *() const { return canvas; }
 
 	[[nodiscard]] std::optional<OBSDataAutoRelease> Save() const;
-	static std::optional<Canvas> Load(obs_data_t *data);
+	static std::unique_ptr<Canvas> Load(obs_data_t *data);
 	static std::vector<Canvas> LoadCanvases(obs_data_array_t *canvases);
 	static OBSDataArrayAutoRelease SaveCanvases(const std::vector<Canvas> &canvases);
 
